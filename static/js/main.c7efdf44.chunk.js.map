{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","clickHandler","e","handleClick","target","value","console","log","selectedCircle","className","onClick","Circles","id","App","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAkCeA,G,MAhCQ,SAACC,GAEtB,IAAMC,EAAe,SAAAC,GACnBF,EAAMG,YAAYD,EAAEE,OAAOC,OAC3BC,QAAQC,IAAIL,EAAEE,OAAOC,QAGvB,GAAIL,EAAMQ,eAER,OACE,yBAAKC,UAAU,kBACb,4BACAA,UAAoC,oBAAzBT,EAAMQ,eAAuC,WAAY,GAAIH,MAAQ,kBAChFK,QAAST,GAAwC,oBAAzBD,EAAMQ,eAAuC,oBAAsB,mBAE3F,4BACAC,UAAoC,oBAAzBT,EAAMQ,eAAuC,WAAY,GAAIH,MAAQ,kBAChFK,QAAST,GAAwC,oBAAzBD,EAAMQ,eAAuC,oBAAsB,mBAE3F,4BACAC,UAAoC,sBAAzBT,EAAMQ,eAAyC,WAAY,GAAIH,MAAQ,oBAClFK,QAAST,GAAwC,sBAAzBD,EAAMQ,eAAyC,oBAAsB,mBAE7F,4BACAC,UAAoC,qBAAzBT,EAAMQ,eAAwC,WAAY,GAAIH,MAAQ,mBACjFK,QAAST,GAAwC,qBAAzBD,EAAMQ,eAAwC,oBAAsB,sBCdrFG,EAXC,SAACX,GACb,OACE,yBAAKS,UAAU,WACb,yBAAKG,GAAG,WAAWH,UAAoC,oBAAzBT,EAAMQ,eAAuC,WAAa,MAAxF,KACA,yBAAKI,GAAG,YAAYH,UAAoC,oBAAzBT,EAAMQ,eAAuC,WAAa,MAAzF,KACA,yBAAKI,GAAG,aAAaH,UAAoC,sBAAzBT,EAAMQ,eAAyC,WAAa,MAA5F,KACA,yBAAKI,GAAG,UAAUH,UAAoC,qBAAzBT,EAAMQ,eAAwC,WAAa,MAAxF,OC6BOK,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAMFV,YAAc,SAACK,GACb,EAAKM,SAAS,CACZN,eAAgBA,KAPlB,EAAKO,MAAO,CACVP,eAAgB,mBAHN,E,qDAcZ,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACAD,eAAgBQ,KAAKD,MAAMP,eAC3BL,YAAaa,KAAKb,cAElB,kBAAC,EAAD,CACAK,eAAgBQ,KAAKD,MAAMP,uB,GAxBnBS,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.c7efdf44.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CircleSelector = (props) => {\r\n\r\n  const clickHandler = e => {\r\n    props.handleClick(e.target.value)\r\n    console.log(e.target.value)\r\n  }\r\n\r\n  if (props.selectedCircle)\r\n  \r\n    return (\r\n      <div className='CircleSelector'>\r\n        <button \r\n        className={props.selectedCircle === 'selectCircleOne' ? 'selected': ''} value = 'selectCircleOne'\r\n        onClick={clickHandler}>{props.selectedCircle === 'selectCircleOne' ? 'CIRCLE 1 SELECTED' : 'SELECT CIRCLE 1'}\r\n        </button>\r\n        <button \r\n        className={props.selectedCircle === 'selectCircleTwo' ? 'selected': ''} value = 'selectCircleTwo'\r\n        onClick={clickHandler}>{props.selectedCircle === 'selectCircleTwo' ? 'CIRCLE 2 SELECTED' : 'SELECT CIRCLE 2'}\r\n        </button>\r\n        <button \r\n        className={props.selectedCircle === 'selectCircleThree' ? 'selected': ''} value = 'selectCircleThree'\r\n        onClick={clickHandler}>{props.selectedCircle === 'selectCircleThree' ? 'CIRCLE 3 SELECTED' : 'SELECT CIRCLE 3'}\r\n        </button>\r\n        <button\r\n        className={props.selectedCircle === 'selectCircleFour' ? 'selected': ''} value = 'selectCircleFour'\r\n        onClick={clickHandler}>{props.selectedCircle === 'selectCircleFour' ? 'CIRCLE 4 SELECTED' : 'SELECT CIRCLE 4'}\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\nexport default CircleSelector;","import React from 'react';\r\n\r\nconst Circles = (props) => {\r\n    return (\r\n      <div className='Circles'>\r\n        <div id='squirtle' className={props.selectedCircle === 'selectCircleOne' ? 'selected' : null}>1</div>\r\n        <div id='bulbasaur' className={props.selectedCircle === 'selectCircleTwo' ? 'selected' : null}>2</div>\r\n        <div id='charmander' className={props.selectedCircle === 'selectCircleThree' ? 'selected' : null}>3</div>\r\n        <div id='pikachu' className={props.selectedCircle === 'selectCircleFour' ? 'selected' : null}>4</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector'\nimport Circles from './components/Circles/Circles'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state= {\n      selectedCircle: 'selectCircleOne'\n    }\n  }\n\n  handleClick = (selectedCircle) => {\n    this.setState({\n      selectedCircle: selectedCircle\n    })\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector \n          selectedCircle={this.state.selectedCircle}\n          handleClick={this.handleClick}\n          />\n          <Circles \n          selectedCircle={this.state.selectedCircle}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}